#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 effective-4.1.50 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef MMBLEMANAGER_SWIFT_H
#define MMBLEMANAGER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#import <MMBLEManager/MMBLEManager.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MMBLEManager",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class MMBLENotificationModel;

SWIFT_CLASS("_TtC12MMBLEManager8MMBLEGCD")
@interface MMBLEGCD : NSObject
/// 主线程
+ (void)onMainAsync:(void (^ _Nonnull)(void))closure delay:(double)delay;
/// 异步线程
+ (void)onGlobalAsync:(void (^ _Nonnull)(void))closure;
/// 发起通知
+ (void)mmPostNotification:(NSString * _Nonnull)name :(id _Nullable)obj :(NSDictionary<NSString *, id> * _Nullable)userInfo;
/// 发起通知
+ (void)mmPostNotification:(MMBLENotificationModel * _Nonnull)model;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MMDeviceDelegate;

SWIFT_CLASS("_TtC12MMBLEManager22MMBLENotificationModel")
@interface MMBLENotificationModel : NSObject
/// 通知名
@property (nonatomic, copy) NSString * _Nullable notificationName;
/// 该事件是否成功
@property (nonatomic) BOOL isSuccess;
/// 其他信息
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable otherInfo;
/// 设备模型
@property (nonatomic, strong) MMDeviceDelegate * _Nullable target;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MMBLEManager12MMBLEStrings")
@interface MMBLEStrings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MMBLEStrings (SWIFT_EXTENSION(MMBLEManager))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeX2;)
+ (NSString * _Nonnull)deviceTypeX2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeT1;)
+ (NSString * _Nonnull)deviceTypeT1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP1L;)
+ (NSString * _Nonnull)deviceTypeP1L SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP2;)
+ (NSString * _Nonnull)deviceTypeP2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeD1;)
+ (NSString * _Nonnull)deviceTypeD1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeC1;)
+ (NSString * _Nonnull)deviceTypeC1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP2S;)
+ (NSString * _Nonnull)deviceTypeP2S SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP1S;)
+ (NSString * _Nonnull)deviceTypeP1S SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeBS1;)
+ (NSString * _Nonnull)deviceTypeBS1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP3;)
+ (NSString * _Nonnull)deviceTypeP3 SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMBLEStrings (SWIFT_EXTENSION(MMBLEManager))
/// 设置SN
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeSNResultNotificationName;)
+ (NSString * _Nonnull)changeSNResultNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceNameNotificationName;)
+ (NSString * _Nonnull)getDeviceNameNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeDeviceNameNotificationName;)
+ (NSString * _Nonnull)changeDeviceNameNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询设备关机时间
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getPowerOffTimeNotificationName;)
+ (NSString * _Nonnull)getPowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备关机时间
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)changePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询电量
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBatterNotificationName;)
+ (NSString * _Nonnull)getBatterNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询电压
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getVolNotificationName;)
+ (NSString * _Nonnull)getVolNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 上报设备电池电压
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getPutVolNotificationName;)
+ (NSString * _Nonnull)getPutVolNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询设备温度
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getTempNotificationName;)
+ (NSString * _Nonnull)getTempNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 上报设备温度
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getPutTempNotificationName;)
+ (NSString * _Nonnull)getPutTempNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设备复位
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resetNotificationName;)
+ (NSString * _Nonnull)resetNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设备休眠
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sleepNotificationName;)
+ (NSString * _Nonnull)sleepNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 关机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull powerOffNotificationName;)
+ (NSString * _Nonnull)powerOffNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置crckey
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setCrcKeyNotificationName;)
+ (NSString * _Nonnull)setCrcKeyNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置秘钥
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDeviceKeyNotificationName;)
+ (NSString * _Nonnull)setDeviceKeyNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 喵喵机验证失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull miaomiaojiVerifyFaildNotificationName;)
+ (NSString * _Nonnull)miaomiaojiVerifyFaildNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 需要更新设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull needUpgradeBleDeviceNotificationName;)
+ (NSString * _Nonnull)needUpgradeBleDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 固件更新发送数据包通知/下载更新包通知
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updatePackageNotificationName;)
+ (NSString * _Nonnull)updatePackageNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 固件更新成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateDeviceSuccessNotificationName;)
+ (NSString * _Nonnull)updateDeviceSuccessNotificationName SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMBLEStrings (SWIFT_EXTENSION(MMBLEManager))
/// 获取SN
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getSNNotificationName;)
+ (NSString * _Nonnull)getSNNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取硬件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBtVersionNotificationName;)
+ (NSString * _Nonnull)getBtVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取软件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getFirmVersionNotificationName;)
+ (NSString * _Nonnull)getFirmVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取设备类型
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceTypeNotificationName;)
+ (NSString * _Nonnull)getDeviceTypeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取协议版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDelegateVersionNotificationName;)
+ (NSString * _Nonnull)getDelegateVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取绑定信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBindDataNotificationName;)
+ (NSString * _Nonnull)getBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 云盒子设备断开连接，{“userDisconnect”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull willConnectCloudDeviceDisconnectNotificationName;)
+ (NSString * _Nonnull)willConnectCloudDeviceDisconnectNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 前往配置网络
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gotoConfigCloudNetworkNotificationName;)
+ (NSString * _Nonnull)gotoConfigCloudNetworkNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 收到系统信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getCloudDeviceInfoNotificationName;)
+ (NSString * _Nonnull)getCloudDeviceInfoNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备绑定信息。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeBindDataNotificationName;)
+ (NSString * _Nonnull)changeBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull closeBTNotificationName;)
+ (NSString * _Nonnull)closeBTNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得WiFiList
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiListNotificationName;)
+ (NSString * _Nonnull)getWifiListNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 连接WiFi结果, {“status”:xx,“msg”:xxx}0x01 表示配网成功,0x02 表示配网失败，其他错误,0x03 表示配网失败，密码错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connectWifiResultNotificationName;)
+ (NSString * _Nonnull)connectWifiResultNotificationName SWIFT_WARN_UNUSED_RESULT;
/// WiFi状态，{“status”:xx,“wifiName”:xx,“rssi”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiStatusNotificationName;)
+ (NSString * _Nonnull)getWifiStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 网口状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getNetworkPortStatusNotificationName;)
+ (NSString * _Nonnull)getNetworkPortStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 服务器状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getServerStatusNotificationName;)
+ (NSString * _Nonnull)getServerStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 主动上报已连接服务器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull submitConnectedServerNotificationName;)
+ (NSString * _Nonnull)submitConnectedServerNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 更换使用设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeUsingDeviceNotificationName;)
+ (NSString * _Nonnull)changeUsingDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifyFaildNotificationName;)
+ (NSString * _Nonnull)verifyFaildNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifySuccessNotificationName;)
+ (NSString * _Nonnull)verifySuccessNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 升级指令回应
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull upgradeDeviceNotificationName;)
+ (NSString * _Nonnull)upgradeDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取到设备支持尺寸
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceSuportSizeNotificationName;)
+ (NSString * _Nonnull)getDeviceSuportSizeNotificationName SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MMBLEUpgradeStartResult, "MMBLEUpgradeStartResult", closed) {
  MMBLEUpgradeStartResultSuccess = 0,
  MMBLEUpgradeStartResultFaild = 1,
  MMBLEUpgradeStartResultUnConnectDevice = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MMBLEUpgradeStatus, "MMBLEUpgradeStatus", closed) {
  MMBLEUpgradeStatusNone = 0,
  MMBLEUpgradeStatusDownloadData = 1,
  MMBLEUpgradeStatusInstallData = 2,
  MMBLEUpgradeStatusRestart = 3,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudConnectWifiResult, "MMCloudConnectWifiResult", closed) {
  MMCloudConnectWifiResultSuccess = 0x01,
  MMCloudConnectWifiResultOtherError = 0x02,
  MMCloudConnectWifiResultPasswordError = 0x03,
};

@class MMBluetoothDeviceModel;

SWIFT_CLASS("_TtC12MMBLEManager15MMCloudDelegate")
@interface MMCloudDelegate : MMDeviceDelegate
@property (nonatomic) BOOL isOnline;
@property (nonatomic) BOOL printStatus;
@property (nonatomic) BOOL isShared;
@property (nonatomic, copy) NSString * _Nullable shareUserNickName;
@property (nonatomic, copy) NSString * _Nullable printerName;
@property (nonatomic, copy) NSString * _Nullable selectDate;
@property (nonatomic) BOOL needUpgrade;
@property (nonatomic, copy) NSArray * _Nullable printerList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDeviceModel:(MMBluetoothDeviceModel * _Nonnull)model SWIFT_UNAVAILABLE;
@end


@interface MMCloudDelegate (SWIFT_EXTENSION(MMBLEManager))
/// 用户主动断开
///
/// returns:
/// description
- (void)disconnectMe;
/// 处理断开连接
///
/// returns:
/// description
- (void)handleDisconnect;
@end

@class UIImage;

@interface MMCloudDelegate (SWIFT_EXTENSION(MMBLEManager))
/// 是否能打印图片
///
/// returns:
/// description
- (BOOL)canPrintImage SWIFT_WARN_UNUSED_RESULT;
/// 打印图片
- (BOOL)printImageWithImage:(UIImage * _Nullable)image count:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// 网络查询状态
///
/// returns:
/// description
- (void)requestServerStatus;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudNetworkPortStatus, "MMCloudNetworkPortStatus", closed) {
  MMCloudNetworkPortStatusUnConnect = 0x00,
  MMCloudNetworkPortStatusConnecting = 0x01,
  MMCloudNetworkPortStatusConnected = 0x02,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudServerStatus, "MMCloudServerStatus", closed) {
  MMCloudServerStatusUnConnect = 0x00,
  MMCloudServerStatusConnecting = 0x01,
  MMCloudServerStatusConnected = 0x02,
};


SWIFT_CLASS("_TtC12MMBLEManager22MMCloudTypeValueConfig")
@interface MMCloudTypeValueConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MMBLEManager18MMCloudUnpackModel")
@interface MMCloudUnpackModel : NSObject
/// 判断是否是广播SN
/// \param rawData rawData description
///
///
/// returns:
/// description
+ (BOOL)isThermalSNDataWithRawData:(NSData * _Nullable)rawData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MMBLEManager16MMCloudWifiModel")
@interface MMCloudWifiModel : NSObject
/// 表示信号强度
@property (nonatomic) NSInteger rssi;
/// 表示该wifi是否需要设置密码，0表示不需要，1表示需要
@property (nonatomic) BOOL flags;
/// wifi的名称
@property (nonatomic, copy) NSString * _Nullable ssid;
- (nonnull instancetype)initWithRssi:(NSInteger)rssi flags:(BOOL)flags ssid:(NSString * _Nullable)ssid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudWifiStatus, "MMCloudWifiStatus", closed) {
  MMCloudWifiStatusIdle = 0x00,
  MMCloudWifiStatusConnecting = 1,
  MMCloudWifiStatusConnectFaild = 2,
  MMCloudWifiStatusPassError = 3,
  MMCloudWifiStatusConnectSuccess = 0x04,
  MMCloudWifiStatusDisConnect = 0x05,
  MMCloudWifiStatusWifiOpen = 6,
  MMCloudWifiStatusWifiClose = 7,
};

enum MMDeviceTempStatus : uint8_t;
enum MMDevicePaperStatus : uint8_t;
enum MMDeviceCoverStatus : uint8_t;

SWIFT_CLASS("_TtC12MMBLEManager8MMConfig")
@interface MMConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMConfig * _Nonnull shared;)
+ (MMConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 支持平级升级
@property (nonatomic) BOOL isAllowUpgradeWhenEqual;
/// 升级成功
@property (nonatomic, copy) void (^ _Nullable didUpdateSuccessBlock)(void);
@property (nonatomic) BOOL goApi;
/// 设备状态改变
@property (nonatomic, copy) void (^ _Nullable deviceStatusChange)(enum MMDeviceTempStatus, enum MMDevicePaperStatus, enum MMDeviceCoverStatus);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMDeviceCoverStatus, "MMDeviceCoverStatus", closed) {
  MMDeviceCoverStatusNormal = 0,
  MMDeviceCoverStatusOpen = 1,
};

@class NSDictionary;

SWIFT_CLASS("_TtC12MMBLEManager15MMDeviceNetwork")
@interface MMDeviceNetwork : NSObject
+ (void)dd;
+ (void)postWithRequest:(NSString * _Nullable)request para:(NSDictionary * _Nullable)para completion:(void (^ _Nullable)(BOOL, id _Nullable, NSString * _Nullable, BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMDevicePaperStatus, "MMDevicePaperStatus", closed) {
  MMDevicePaperStatusNormal = 0,
  MMDevicePaperStatusLack = 1,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMDeviceTempStatus, "MMDeviceTempStatus", closed) {
  MMDeviceTempStatusNormal = 0,
  MMDeviceTempStatusHigh = 1,
};


SWIFT_CLASS("_TtC12MMBLEManager12MMDeviceUrls")
@interface MMDeviceUrls : NSObject
/// 设备登录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceLogin;)
+ (NSString * _Nonnull)deviceLogin SWIFT_WARN_UNUSED_RESULT;
/// 设备登录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceNewLogin;)
+ (NSString * _Nonnull)deviceNewLogin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_oauth_token;)
+ (NSString * _Nonnull)kUrl_api_oauth_token SWIFT_WARN_UNUSED_RESULT;
/// 设备蓝牙名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_names;)
+ (NSString * _Nonnull)kUrl_api_device_names SWIFT_WARN_UNUSED_RESULT;
/// 获取sdk内置网页
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_config_geturlbyname;)
+ (NSString * _Nonnull)kUrl_api_config_geturlbyname SWIFT_WARN_UNUSED_RESULT;
/// 获取设备固件
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_firmware;)
+ (NSString * _Nonnull)kUrl_api_device_firmware SWIFT_WARN_UNUSED_RESULT;
/// 设备固件升级
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_updatefirmware;)
+ (NSString * _Nonnull)kUrl_api_device_updatefirmware SWIFT_WARN_UNUSED_RESULT;
/// 设备登录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_login;)
+ (NSString * _Nonnull)kUrl_api_device_login SWIFT_WARN_UNUSED_RESULT;
/// 打印数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_print;)
+ (NSString * _Nonnull)kUrl_api_device_print SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MMBLEManager5MMLog")
@interface MMLog : NSObject
+ (void)showLogWithMsg:(NSString * _Nonnull)msg;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCharacteristic;
@class CBPeripheral;

SWIFT_CLASS("_TtC12MMBLEManager21MMThermalDeviceHandle")
@interface MMThermalDeviceHandle : NSObject
@property (nonatomic, copy) void (^ _Nullable updateCreditClosure)(NSInteger);
@property (nonatomic) NSInteger maxWidth;
@property (nonatomic) NSInteger printWidth;
@property (nonatomic) NSInteger imageWidth;
@property (nonatomic) NSInteger mtu;
@property (nonatomic) NSInteger credit;
@property (nonatomic) NSInteger packageLength;
@property (nonatomic, strong) CBCharacteristic * _Nullable writeC;
@property (nonatomic, strong) CBCharacteristic * _Nullable mcuNotifyC;
@property (nonatomic, strong) CBCharacteristic * _Nullable btNotifyC;
- (void)updateBuffCredit:(NSInteger)credit;
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
@property (nonatomic) BOOL needVerify;
- (nonnull instancetype)initWithTarget:(MMDeviceDelegate * _Nullable)target OBJC_DESIGNATED_INITIALIZER;
- (NSArray * _Nonnull)disposalData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (void)unpackBTData:(NSData * _Nullable)data;
/// 用户主动断开
///
/// returns:
/// description
- (void)disconnectMe;
/// 处理断开连接
///
/// returns:
/// description
- (void)handleDisconnect;
- (void)handleVerifyFinish;
- (void)thermalGetIdle;
- (void)loadAlarmNote:(NSData * _Nonnull)data;
- (void)loadTomatoNote:(NSData * _Nonnull)data;
/// 升级
- (void)updateWithData:(NSData * _Nullable)data;
/// 更新设备模型数据
///
/// returns:
/// description
- (void)updateTarget;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
- (void)unpack:(NSData * _Nonnull)data;
@end

@class CBService;

@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
- (NSArray<NSData *> * _Nullable)packGetClockInfo SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetClock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetClock:(NSData * _Nonnull)clock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetClockFormat SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetClockFormat:(uint8_t)format SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetTurnoffTime SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetTurnoffTime:(uint32_t)interval SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetAlarm:(NSArray<NSData *> * _Nonnull)alarm SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packDelAlarm:(uint32_t)alarmId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetAlarms SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetSleepAlarms SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetSleepAlarm:(uint8_t)alarm SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetTomatoClock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetTomatoClock:(NSData * _Nonnull)tomatoClock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetTomatoCount SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetAlarmTone SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetAlarmTone:(NSArray<NSData *> * _Nonnull)tone SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetAlarmNote SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetAlarmNote:(NSArray<NSData *> * _Nonnull)note SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
- (void)sendDatasWithDatas:(NSArray<NSData *> * _Nullable)datas isImage:(BOOL)isImage;
/// 连接WiFi
- (BOOL)connectWifiWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// 查询WiFi
///
/// returns:
/// description
- (BOOL)queryWifiList SWIFT_WARN_UNUSED_RESULT;
/// 查询网口
///
/// returns:
/// description
- (BOOL)checkNetworkStatus SWIFT_WARN_UNUSED_RESULT;
/// 查询是否已连接服务器
///
/// returns:
/// description
- (BOOL)checkServerStatus SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙
///
/// returns:
/// 是否可发送数据
- (BOOL)closeBT SWIFT_WARN_UNUSED_RESULT;
/// 设置SN
- (BOOL)changeSNWithSn:(NSString * _Nullable)sn SWIFT_WARN_UNUSED_RESULT;
/// 查询设备名称
- (BOOL)getDeviceName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备名称
- (BOOL)changeDeviceNameWithNewName:(NSString * _Nullable)newName SWIFT_WARN_UNUSED_RESULT;
/// 获取自动关机时间
///
/// returns:
/// description
- (BOOL)getPowerOffTime SWIFT_WARN_UNUSED_RESULT;
/// 设置设备关机时间
- (BOOL)changePowerOffTimeWithSecond:(NSInteger)second SWIFT_WARN_UNUSED_RESULT;
/// 查询设备电池电量百分比
- (BOOL)getBattery SWIFT_WARN_UNUSED_RESULT;
/// 查询设备电池电压
- (BOOL)getVol SWIFT_WARN_UNUSED_RESULT;
/// 查询设备温度
- (BOOL)getTemp SWIFT_WARN_UNUSED_RESULT;
/// 设备复位
- (BOOL)reset SWIFT_WARN_UNUSED_RESULT;
/// 设备休眠
- (BOOL)sleep SWIFT_WARN_UNUSED_RESULT;
/// 设备关机
- (BOOL)powerOff SWIFT_WARN_UNUSED_RESULT;
/// 设置设备CrcKey
- (BOOL)changeCrcKeyWithNewCrcKey:(uint32_t)newCrcKey SWIFT_WARN_UNUSED_RESULT;
/// 设置设备密钥
- (BOOL)changeDeviceKeyWithKeyData:(NSData * _Nullable)keyData SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
/// 查询SN
///
/// returns:
/// description
- (NSArray<NSData *> * _Nullable)packGetSN SWIFT_WARN_UNUSED_RESULT;
/// 握手请求验证设备身份
///
/// returns:
/// description
- (NSArray<NSData *> * _Nullable)packGetDeviceRandomCode SWIFT_WARN_UNUSED_RESULT;
@end

@class MMDeviceManagerOpModel;

@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
/// 查询设备关机时间
- (NSArray<NSData *> * _Nullable)packGetPowerOffTime SWIFT_WARN_UNUSED_RESULT;
/// 设置设备关机时间
- (NSArray<NSData *> * _Nullable)packChangePowerOffTimeWithSecond:(NSInteger)second SWIFT_WARN_UNUSED_RESULT;
/// 查询设备电池电量百分比
- (NSArray<NSData *> * _Nullable)packGetBattery SWIFT_WARN_UNUSED_RESULT;
/// 设备复位
- (NSArray<NSData *> * _Nullable)packReset SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packTestPage SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetSense:(uint32_t)sense SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetVelocity:(uint16_t)velocity SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetDensity:(uint8_t)density SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packFeedline:(uint16_t)len SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)gapLocate:(uint32_t)maxLength SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nonnull)packBinaryTree:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packStartPrint SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packPrintData:(NSData * _Nonnull)data :(uint8_t)isCompress :(BOOL)feedLine :(PrintPaperType)type :(SWIFT_NOESCAPE void (^ _Nonnull)(MMDeviceManagerOpModel * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nonnull)packImageData:(NSData * _Nonnull)data :(uint8_t)isCompress SWIFT_WARN_UNUSED_RESULT;
@end

enum MMUpdateType : NSInteger;

SWIFT_CLASS("_TtC12MMBLEManager16MMThermalManager")
@interface MMThermalManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMThermalManager * _Nonnull shared;)
+ (MMThermalManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// 升级硬件状态
@property (nonatomic) enum MMBLEUpgradeStatus upgradeStatus;
/// 固件升级重启记录,identifier
@property (nonatomic, copy) NSString * _Nullable upgradeDeviceIdentifier;
@property (nonatomic) enum MMUpdateType updateType;
/// 升级进度，0~1.0之间,默认为1
@property (nonatomic) double upgradeProgress;
/// 升级开始
///
/// returns:
/// 是否成功
- (void)beginUpdateVersionWithCompletion:(void (^ _Nullable)(enum MMBLEUpgradeStartResult))completion;
@end

@class NSURLSession;
@class NSURLSessionDownloadTask;

@interface MMThermalManager (SWIFT_EXTENSION(MMBLEManager)) <NSURLSessionDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MMUpdateType, "MMUpdateType", closed) {
  MMUpdateTypeNone = 0,
  MMUpdateTypeFirm = 1,
  MMUpdateTypeBluetooth = 2,
};


SWIFT_CLASS("_TtC12MMBLEManager12MMUseManager")
@interface MMUseManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMUseManager * _Nonnull shared;)
+ (MMUseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 已处理过的云盒子identitier，用于断网区分,可以不清除
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull cloudIdentifiers;
/// 当前使用的设备
@property (nonatomic) id _Nullable usingDevice;
@property (nonatomic, strong) MMCloudDelegate * _Nullable willConnectCloudDevice;
/// 允许使用设备类型
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull useEnableDeviceNames;
/// 业务主动配置允许设备名称
/// \param deviceNames deviceNames description
///
///
/// returns:
/// description
- (void)configUseEnableNameWithDeviceNames:(NSArray<NSString *> * _Nullable)deviceNames;
/// 是否允许使用
- (BOOL)isUseEnableWithDeviceName:(NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
- (void)clearCache;
/// 使用设备
- (void)useWithDevice:(NSObject * _Nonnull)device;
/// 断开即将配网的小盒子
///
/// returns:
/// description
- (void)disconnectWillCloudDevice;
/// 查询WiFi
///
/// returns:
/// description
- (BOOL)queryWifiList SWIFT_WARN_UNUSED_RESULT;
/// 查询网口状态
///
/// returns:
/// description
- (BOOL)checkNetworkPortStatus SWIFT_WARN_UNUSED_RESULT;
/// 查询是否连接服务器
///
/// returns:
/// description
- (BOOL)checkServerStatus SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙
///
/// returns:
/// description
- (BOOL)closeBT SWIFT_WARN_UNUSED_RESULT;
/// 连接WiFi
- (BOOL)connnectWifiWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12MMBLEManager13MMUsingDevice")
@interface MMUsingDevice : NSObject
@property (nonatomic, copy) NSString * _Nullable snCode;
@property (nonatomic, copy) NSString * _Nullable deviceType;
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable identifier;
@property (nonatomic, copy) NSString * _Nullable alias;
@property (nonatomic, copy) NSString * _Nullable printerName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (MMUsingDevice * _Nonnull)createWithModel:(MMBluetoothDeviceModel * _Nonnull)model printerName:(NSString * _Nonnull)printerName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSnCode:(NSString * _Nonnull)snCode deviceType:(NSString * _Nonnull)deviceType deviceName:(NSString * _Nonnull)deviceName lasTime:(double)lasTime identifier:(NSString * _Nonnull)identifier alias:(NSString * _Nonnull)alias printerName:(NSString * _Nonnull)printerName OBJC_DESIGNATED_INITIALIZER;
/// 当前用户使用
///
/// returns:
/// description
+ (MMUsingDevice * _Nullable)current SWIFT_WARN_UNUSED_RESULT;
/// 清空缓存
///
/// returns:
/// description
+ (void)clear;
/// 保存或者更新
///
/// returns:
/// description
- (void)saveOrUpdate;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 effective-4.1.50 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef MMBLEMANAGER_SWIFT_H
#define MMBLEMANAGER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#import <MMBLEManager/MMBLEManager.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MMBLEManager",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class MMBLENotificationModel;

SWIFT_CLASS("_TtC12MMBLEManager8MMBLEGCD")
@interface MMBLEGCD : NSObject
/// 主线程
+ (void)onMainAsync:(void (^ _Nonnull)(void))closure delay:(double)delay;
/// 异步线程
+ (void)onGlobalAsync:(void (^ _Nonnull)(void))closure;
/// 发起通知
+ (void)mmPostNotification:(NSString * _Nonnull)name :(id _Nullable)obj :(NSDictionary<NSString *, id> * _Nullable)userInfo;
/// 发起通知
+ (void)mmPostNotification:(MMBLENotificationModel * _Nonnull)model;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MMDeviceDelegate;

SWIFT_CLASS("_TtC12MMBLEManager22MMBLENotificationModel")
@interface MMBLENotificationModel : NSObject
/// 通知名
@property (nonatomic, copy) NSString * _Nullable notificationName;
/// 该事件是否成功
@property (nonatomic) BOOL isSuccess;
/// 其他信息
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable otherInfo;
/// 设备模型
@property (nonatomic, strong) MMDeviceDelegate * _Nullable target;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MMBLEManager12MMBLEStrings")
@interface MMBLEStrings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MMBLEStrings (SWIFT_EXTENSION(MMBLEManager))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeX2;)
+ (NSString * _Nonnull)deviceTypeX2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeT1;)
+ (NSString * _Nonnull)deviceTypeT1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP1L;)
+ (NSString * _Nonnull)deviceTypeP1L SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP2;)
+ (NSString * _Nonnull)deviceTypeP2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeD1;)
+ (NSString * _Nonnull)deviceTypeD1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeC1;)
+ (NSString * _Nonnull)deviceTypeC1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP2S;)
+ (NSString * _Nonnull)deviceTypeP2S SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP1S;)
+ (NSString * _Nonnull)deviceTypeP1S SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeBS1;)
+ (NSString * _Nonnull)deviceTypeBS1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceTypeP3;)
+ (NSString * _Nonnull)deviceTypeP3 SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMBLEStrings (SWIFT_EXTENSION(MMBLEManager))
/// 设置SN
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeSNResultNotificationName;)
+ (NSString * _Nonnull)changeSNResultNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceNameNotificationName;)
+ (NSString * _Nonnull)getDeviceNameNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeDeviceNameNotificationName;)
+ (NSString * _Nonnull)changeDeviceNameNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询设备关机时间
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getPowerOffTimeNotificationName;)
+ (NSString * _Nonnull)getPowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备关机时间
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changePowerOffTimeNotificationName;)
+ (NSString * _Nonnull)changePowerOffTimeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询电量
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBatterNotificationName;)
+ (NSString * _Nonnull)getBatterNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询电压
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getVolNotificationName;)
+ (NSString * _Nonnull)getVolNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 上报设备电池电压
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getPutVolNotificationName;)
+ (NSString * _Nonnull)getPutVolNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 查询设备温度
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getTempNotificationName;)
+ (NSString * _Nonnull)getTempNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 上报设备温度
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getPutTempNotificationName;)
+ (NSString * _Nonnull)getPutTempNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设备复位
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resetNotificationName;)
+ (NSString * _Nonnull)resetNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设备休眠
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sleepNotificationName;)
+ (NSString * _Nonnull)sleepNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 关机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull powerOffNotificationName;)
+ (NSString * _Nonnull)powerOffNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置crckey
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setCrcKeyNotificationName;)
+ (NSString * _Nonnull)setCrcKeyNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置秘钥
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setDeviceKeyNotificationName;)
+ (NSString * _Nonnull)setDeviceKeyNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 喵喵机验证失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull miaomiaojiVerifyFaildNotificationName;)
+ (NSString * _Nonnull)miaomiaojiVerifyFaildNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 需要更新设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull needUpgradeBleDeviceNotificationName;)
+ (NSString * _Nonnull)needUpgradeBleDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 固件更新发送数据包通知/下载更新包通知
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updatePackageNotificationName;)
+ (NSString * _Nonnull)updatePackageNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 固件更新成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull updateDeviceSuccessNotificationName;)
+ (NSString * _Nonnull)updateDeviceSuccessNotificationName SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMBLEStrings (SWIFT_EXTENSION(MMBLEManager))
/// 获取SN
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getSNNotificationName;)
+ (NSString * _Nonnull)getSNNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取硬件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBtVersionNotificationName;)
+ (NSString * _Nonnull)getBtVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取软件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getFirmVersionNotificationName;)
+ (NSString * _Nonnull)getFirmVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取设备类型
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceTypeNotificationName;)
+ (NSString * _Nonnull)getDeviceTypeNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取协议版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDelegateVersionNotificationName;)
+ (NSString * _Nonnull)getDelegateVersionNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取绑定信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getBindDataNotificationName;)
+ (NSString * _Nonnull)getBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 云盒子设备断开连接，{“userDisconnect”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull willConnectCloudDeviceDisconnectNotificationName;)
+ (NSString * _Nonnull)willConnectCloudDeviceDisconnectNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 前往配置网络
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gotoConfigCloudNetworkNotificationName;)
+ (NSString * _Nonnull)gotoConfigCloudNetworkNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 收到系统信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getCloudDeviceInfoNotificationName;)
+ (NSString * _Nonnull)getCloudDeviceInfoNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备绑定信息。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeBindDataNotificationName;)
+ (NSString * _Nonnull)changeBindDataNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙。
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull closeBTNotificationName;)
+ (NSString * _Nonnull)closeBTNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获得WiFiList
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiListNotificationName;)
+ (NSString * _Nonnull)getWifiListNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 连接WiFi结果, {“status”:xx,“msg”:xxx}0x01 表示配网成功,0x02 表示配网失败，其他错误,0x03 表示配网失败，密码错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connectWifiResultNotificationName;)
+ (NSString * _Nonnull)connectWifiResultNotificationName SWIFT_WARN_UNUSED_RESULT;
/// WiFi状态，{“status”:xx,“wifiName”:xx,“rssi”:xx}
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiStatusNotificationName;)
+ (NSString * _Nonnull)getWifiStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 网口状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getNetworkPortStatusNotificationName;)
+ (NSString * _Nonnull)getNetworkPortStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 服务器状态
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getServerStatusNotificationName;)
+ (NSString * _Nonnull)getServerStatusNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 主动上报已连接服务器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull submitConnectedServerNotificationName;)
+ (NSString * _Nonnull)submitConnectedServerNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 更换使用设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull changeUsingDeviceNotificationName;)
+ (NSString * _Nonnull)changeUsingDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifyFaildNotificationName;)
+ (NSString * _Nonnull)verifyFaildNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 认证成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull verifySuccessNotificationName;)
+ (NSString * _Nonnull)verifySuccessNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 升级指令回应
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull upgradeDeviceNotificationName;)
+ (NSString * _Nonnull)upgradeDeviceNotificationName SWIFT_WARN_UNUSED_RESULT;
/// 获取到设备支持尺寸
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getDeviceSuportSizeNotificationName;)
+ (NSString * _Nonnull)getDeviceSuportSizeNotificationName SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MMBLEUpgradeStartResult, "MMBLEUpgradeStartResult", closed) {
  MMBLEUpgradeStartResultSuccess = 0,
  MMBLEUpgradeStartResultFaild = 1,
  MMBLEUpgradeStartResultUnConnectDevice = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MMBLEUpgradeStatus, "MMBLEUpgradeStatus", closed) {
  MMBLEUpgradeStatusNone = 0,
  MMBLEUpgradeStatusDownloadData = 1,
  MMBLEUpgradeStatusInstallData = 2,
  MMBLEUpgradeStatusRestart = 3,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudConnectWifiResult, "MMCloudConnectWifiResult", closed) {
  MMCloudConnectWifiResultSuccess = 0x01,
  MMCloudConnectWifiResultOtherError = 0x02,
  MMCloudConnectWifiResultPasswordError = 0x03,
};

@class MMBluetoothDeviceModel;

SWIFT_CLASS("_TtC12MMBLEManager15MMCloudDelegate")
@interface MMCloudDelegate : MMDeviceDelegate
@property (nonatomic) BOOL isOnline;
@property (nonatomic) BOOL printStatus;
@property (nonatomic) BOOL isShared;
@property (nonatomic, copy) NSString * _Nullable shareUserNickName;
@property (nonatomic, copy) NSString * _Nullable printerName;
@property (nonatomic, copy) NSString * _Nullable selectDate;
@property (nonatomic) BOOL needUpgrade;
@property (nonatomic, copy) NSArray * _Nullable printerList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDeviceModel:(MMBluetoothDeviceModel * _Nonnull)model SWIFT_UNAVAILABLE;
@end


@interface MMCloudDelegate (SWIFT_EXTENSION(MMBLEManager))
/// 用户主动断开
///
/// returns:
/// description
- (void)disconnectMe;
/// 处理断开连接
///
/// returns:
/// description
- (void)handleDisconnect;
@end

@class UIImage;

@interface MMCloudDelegate (SWIFT_EXTENSION(MMBLEManager))
/// 是否能打印图片
///
/// returns:
/// description
- (BOOL)canPrintImage SWIFT_WARN_UNUSED_RESULT;
/// 打印图片
- (BOOL)printImageWithImage:(UIImage * _Nullable)image count:(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// 网络查询状态
///
/// returns:
/// description
- (void)requestServerStatus;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudNetworkPortStatus, "MMCloudNetworkPortStatus", closed) {
  MMCloudNetworkPortStatusUnConnect = 0x00,
  MMCloudNetworkPortStatusConnecting = 0x01,
  MMCloudNetworkPortStatusConnected = 0x02,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudServerStatus, "MMCloudServerStatus", closed) {
  MMCloudServerStatusUnConnect = 0x00,
  MMCloudServerStatusConnecting = 0x01,
  MMCloudServerStatusConnected = 0x02,
};


SWIFT_CLASS("_TtC12MMBLEManager22MMCloudTypeValueConfig")
@interface MMCloudTypeValueConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MMBLEManager18MMCloudUnpackModel")
@interface MMCloudUnpackModel : NSObject
/// 判断是否是广播SN
/// \param rawData rawData description
///
///
/// returns:
/// description
+ (BOOL)isThermalSNDataWithRawData:(NSData * _Nullable)rawData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MMBLEManager16MMCloudWifiModel")
@interface MMCloudWifiModel : NSObject
/// 表示信号强度
@property (nonatomic) NSInteger rssi;
/// 表示该wifi是否需要设置密码，0表示不需要，1表示需要
@property (nonatomic) BOOL flags;
/// wifi的名称
@property (nonatomic, copy) NSString * _Nullable ssid;
- (nonnull instancetype)initWithRssi:(NSInteger)rssi flags:(BOOL)flags ssid:(NSString * _Nullable)ssid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMCloudWifiStatus, "MMCloudWifiStatus", closed) {
  MMCloudWifiStatusIdle = 0x00,
  MMCloudWifiStatusConnecting = 1,
  MMCloudWifiStatusConnectFaild = 2,
  MMCloudWifiStatusPassError = 3,
  MMCloudWifiStatusConnectSuccess = 0x04,
  MMCloudWifiStatusDisConnect = 0x05,
  MMCloudWifiStatusWifiOpen = 6,
  MMCloudWifiStatusWifiClose = 7,
};

enum MMDeviceTempStatus : uint8_t;
enum MMDevicePaperStatus : uint8_t;
enum MMDeviceCoverStatus : uint8_t;

SWIFT_CLASS("_TtC12MMBLEManager8MMConfig")
@interface MMConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMConfig * _Nonnull shared;)
+ (MMConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 支持平级升级
@property (nonatomic) BOOL isAllowUpgradeWhenEqual;
/// 升级成功
@property (nonatomic, copy) void (^ _Nullable didUpdateSuccessBlock)(void);
@property (nonatomic) BOOL goApi;
/// 设备状态改变
@property (nonatomic, copy) void (^ _Nullable deviceStatusChange)(enum MMDeviceTempStatus, enum MMDevicePaperStatus, enum MMDeviceCoverStatus);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMDeviceCoverStatus, "MMDeviceCoverStatus", closed) {
  MMDeviceCoverStatusNormal = 0,
  MMDeviceCoverStatusOpen = 1,
};

@class NSDictionary;

SWIFT_CLASS("_TtC12MMBLEManager15MMDeviceNetwork")
@interface MMDeviceNetwork : NSObject
+ (void)dd;
+ (void)postWithRequest:(NSString * _Nullable)request para:(NSDictionary * _Nullable)para completion:(void (^ _Nullable)(BOOL, id _Nullable, NSString * _Nullable, BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(uint8_t, MMDevicePaperStatus, "MMDevicePaperStatus", closed) {
  MMDevicePaperStatusNormal = 0,
  MMDevicePaperStatusLack = 1,
};

typedef SWIFT_ENUM_NAMED(uint8_t, MMDeviceTempStatus, "MMDeviceTempStatus", closed) {
  MMDeviceTempStatusNormal = 0,
  MMDeviceTempStatusHigh = 1,
};


SWIFT_CLASS("_TtC12MMBLEManager12MMDeviceUrls")
@interface MMDeviceUrls : NSObject
/// 设备登录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceLogin;)
+ (NSString * _Nonnull)deviceLogin SWIFT_WARN_UNUSED_RESULT;
/// 设备登录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceNewLogin;)
+ (NSString * _Nonnull)deviceNewLogin SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_oauth_token;)
+ (NSString * _Nonnull)kUrl_api_oauth_token SWIFT_WARN_UNUSED_RESULT;
/// 设备蓝牙名称
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_names;)
+ (NSString * _Nonnull)kUrl_api_device_names SWIFT_WARN_UNUSED_RESULT;
/// 获取sdk内置网页
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_config_geturlbyname;)
+ (NSString * _Nonnull)kUrl_api_config_geturlbyname SWIFT_WARN_UNUSED_RESULT;
/// 获取设备固件
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_firmware;)
+ (NSString * _Nonnull)kUrl_api_device_firmware SWIFT_WARN_UNUSED_RESULT;
/// 设备固件升级
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_updatefirmware;)
+ (NSString * _Nonnull)kUrl_api_device_updatefirmware SWIFT_WARN_UNUSED_RESULT;
/// 设备登录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_login;)
+ (NSString * _Nonnull)kUrl_api_device_login SWIFT_WARN_UNUSED_RESULT;
/// 打印数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kUrl_api_device_print;)
+ (NSString * _Nonnull)kUrl_api_device_print SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12MMBLEManager5MMLog")
@interface MMLog : NSObject
+ (void)showLogWithMsg:(NSString * _Nonnull)msg;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCharacteristic;
@class CBPeripheral;

SWIFT_CLASS("_TtC12MMBLEManager21MMThermalDeviceHandle")
@interface MMThermalDeviceHandle : NSObject
@property (nonatomic, copy) void (^ _Nullable updateCreditClosure)(NSInteger);
@property (nonatomic) NSInteger maxWidth;
@property (nonatomic) NSInteger printWidth;
@property (nonatomic) NSInteger imageWidth;
@property (nonatomic) NSInteger mtu;
@property (nonatomic) NSInteger credit;
@property (nonatomic) NSInteger packageLength;
@property (nonatomic, strong) CBCharacteristic * _Nullable writeC;
@property (nonatomic, strong) CBCharacteristic * _Nullable mcuNotifyC;
@property (nonatomic, strong) CBCharacteristic * _Nullable btNotifyC;
- (void)updateBuffCredit:(NSInteger)credit;
@property (nonatomic, strong) CBPeripheral * _Nullable peripheral;
@property (nonatomic) BOOL needVerify;
- (nonnull instancetype)initWithTarget:(MMDeviceDelegate * _Nullable)target OBJC_DESIGNATED_INITIALIZER;
- (NSArray * _Nonnull)disposalData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
- (void)unpackBTData:(NSData * _Nullable)data;
/// 用户主动断开
///
/// returns:
/// description
- (void)disconnectMe;
/// 处理断开连接
///
/// returns:
/// description
- (void)handleDisconnect;
- (void)handleVerifyFinish;
- (void)thermalGetIdle;
- (void)loadAlarmNote:(NSData * _Nonnull)data;
- (void)loadTomatoNote:(NSData * _Nonnull)data;
/// 升级
- (void)updateWithData:(NSData * _Nullable)data;
/// 更新设备模型数据
///
/// returns:
/// description
- (void)updateTarget;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
- (void)unpack:(NSData * _Nonnull)data;
@end

@class CBService;

@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
- (NSArray<NSData *> * _Nullable)packGetClockInfo SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetClock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetClock:(NSData * _Nonnull)clock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetClockFormat SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetClockFormat:(uint8_t)format SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetTurnoffTime SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetTurnoffTime:(uint32_t)interval SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetAlarm:(NSArray<NSData *> * _Nonnull)alarm SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packDelAlarm:(uint32_t)alarmId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetAlarms SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetSleepAlarms SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetSleepAlarm:(uint8_t)alarm SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetTomatoClock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetTomatoClock:(NSData * _Nonnull)tomatoClock SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetTomatoCount SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetAlarmTone SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetAlarmTone:(NSArray<NSData *> * _Nonnull)tone SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packGetAlarmNote SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetAlarmNote:(NSArray<NSData *> * _Nonnull)note SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
- (void)sendDatasWithDatas:(NSArray<NSData *> * _Nullable)datas isImage:(BOOL)isImage;
/// 连接WiFi
- (BOOL)connectWifiWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
/// 查询WiFi
///
/// returns:
/// description
- (BOOL)queryWifiList SWIFT_WARN_UNUSED_RESULT;
/// 查询网口
///
/// returns:
/// description
- (BOOL)checkNetworkStatus SWIFT_WARN_UNUSED_RESULT;
/// 查询是否已连接服务器
///
/// returns:
/// description
- (BOOL)checkServerStatus SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙
///
/// returns:
/// 是否可发送数据
- (BOOL)closeBT SWIFT_WARN_UNUSED_RESULT;
/// 设置SN
- (BOOL)changeSNWithSn:(NSString * _Nullable)sn SWIFT_WARN_UNUSED_RESULT;
/// 查询设备名称
- (BOOL)getDeviceName SWIFT_WARN_UNUSED_RESULT;
/// 设置设备名称
- (BOOL)changeDeviceNameWithNewName:(NSString * _Nullable)newName SWIFT_WARN_UNUSED_RESULT;
/// 获取自动关机时间
///
/// returns:
/// description
- (BOOL)getPowerOffTime SWIFT_WARN_UNUSED_RESULT;
/// 设置设备关机时间
- (BOOL)changePowerOffTimeWithSecond:(NSInteger)second SWIFT_WARN_UNUSED_RESULT;
/// 查询设备电池电量百分比
- (BOOL)getBattery SWIFT_WARN_UNUSED_RESULT;
/// 查询设备电池电压
- (BOOL)getVol SWIFT_WARN_UNUSED_RESULT;
/// 查询设备温度
- (BOOL)getTemp SWIFT_WARN_UNUSED_RESULT;
/// 设备复位
- (BOOL)reset SWIFT_WARN_UNUSED_RESULT;
/// 设备休眠
- (BOOL)sleep SWIFT_WARN_UNUSED_RESULT;
/// 设备关机
- (BOOL)powerOff SWIFT_WARN_UNUSED_RESULT;
/// 设置设备CrcKey
- (BOOL)changeCrcKeyWithNewCrcKey:(uint32_t)newCrcKey SWIFT_WARN_UNUSED_RESULT;
/// 设置设备密钥
- (BOOL)changeDeviceKeyWithKeyData:(NSData * _Nullable)keyData SWIFT_WARN_UNUSED_RESULT;
@end


@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
/// 查询SN
///
/// returns:
/// description
- (NSArray<NSData *> * _Nullable)packGetSN SWIFT_WARN_UNUSED_RESULT;
/// 握手请求验证设备身份
///
/// returns:
/// description
- (NSArray<NSData *> * _Nullable)packGetDeviceRandomCode SWIFT_WARN_UNUSED_RESULT;
@end

@class MMDeviceManagerOpModel;

@interface MMThermalDeviceHandle (SWIFT_EXTENSION(MMBLEManager))
/// 查询设备关机时间
- (NSArray<NSData *> * _Nullable)packGetPowerOffTime SWIFT_WARN_UNUSED_RESULT;
/// 设置设备关机时间
- (NSArray<NSData *> * _Nullable)packChangePowerOffTimeWithSecond:(NSInteger)second SWIFT_WARN_UNUSED_RESULT;
/// 查询设备电池电量百分比
- (NSArray<NSData *> * _Nullable)packGetBattery SWIFT_WARN_UNUSED_RESULT;
/// 设备复位
- (NSArray<NSData *> * _Nullable)packReset SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packTestPage SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetSense:(uint32_t)sense SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetVelocity:(uint16_t)velocity SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packSetDensity:(uint8_t)density SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packFeedline:(uint16_t)len SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)gapLocate:(uint32_t)maxLength SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nonnull)packBinaryTree:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packStartPrint SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nullable)packPrintData:(NSData * _Nonnull)data :(uint8_t)isCompress :(BOOL)feedLine :(PrintPaperType)type :(SWIFT_NOESCAPE void (^ _Nonnull)(MMDeviceManagerOpModel * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSData *> * _Nonnull)packImageData:(NSData * _Nonnull)data :(uint8_t)isCompress SWIFT_WARN_UNUSED_RESULT;
@end

enum MMUpdateType : NSInteger;

SWIFT_CLASS("_TtC12MMBLEManager16MMThermalManager")
@interface MMThermalManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMThermalManager * _Nonnull shared;)
+ (MMThermalManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// 升级硬件状态
@property (nonatomic) enum MMBLEUpgradeStatus upgradeStatus;
/// 固件升级重启记录,identifier
@property (nonatomic, copy) NSString * _Nullable upgradeDeviceIdentifier;
@property (nonatomic) enum MMUpdateType updateType;
/// 升级进度，0~1.0之间,默认为1
@property (nonatomic) double upgradeProgress;
/// 升级开始
///
/// returns:
/// 是否成功
- (void)beginUpdateVersionWithCompletion:(void (^ _Nullable)(enum MMBLEUpgradeStartResult))completion;
@end

@class NSURLSession;
@class NSURLSessionDownloadTask;

@interface MMThermalManager (SWIFT_EXTENSION(MMBLEManager)) <NSURLSessionDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MMUpdateType, "MMUpdateType", closed) {
  MMUpdateTypeNone = 0,
  MMUpdateTypeFirm = 1,
  MMUpdateTypeBluetooth = 2,
};


SWIFT_CLASS("_TtC12MMBLEManager12MMUseManager")
@interface MMUseManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MMUseManager * _Nonnull shared;)
+ (MMUseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// 已处理过的云盒子identitier，用于断网区分,可以不清除
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull cloudIdentifiers;
/// 当前使用的设备
@property (nonatomic) id _Nullable usingDevice;
@property (nonatomic, strong) MMCloudDelegate * _Nullable willConnectCloudDevice;
/// 允许使用设备类型
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull useEnableDeviceNames;
/// 业务主动配置允许设备名称
/// \param deviceNames deviceNames description
///
///
/// returns:
/// description
- (void)configUseEnableNameWithDeviceNames:(NSArray<NSString *> * _Nullable)deviceNames;
/// 是否允许使用
- (BOOL)isUseEnableWithDeviceName:(NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
- (void)clearCache;
/// 使用设备
- (void)useWithDevice:(NSObject * _Nonnull)device;
/// 断开即将配网的小盒子
///
/// returns:
/// description
- (void)disconnectWillCloudDevice;
/// 查询WiFi
///
/// returns:
/// description
- (BOOL)queryWifiList SWIFT_WARN_UNUSED_RESULT;
/// 查询网口状态
///
/// returns:
/// description
- (BOOL)checkNetworkPortStatus SWIFT_WARN_UNUSED_RESULT;
/// 查询是否连接服务器
///
/// returns:
/// description
- (BOOL)checkServerStatus SWIFT_WARN_UNUSED_RESULT;
/// 关闭蓝牙
///
/// returns:
/// description
- (BOOL)closeBT SWIFT_WARN_UNUSED_RESULT;
/// 连接WiFi
- (BOOL)connnectWifiWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12MMBLEManager13MMUsingDevice")
@interface MMUsingDevice : NSObject
@property (nonatomic, copy) NSString * _Nullable snCode;
@property (nonatomic, copy) NSString * _Nullable deviceType;
@property (nonatomic, copy) NSString * _Nullable deviceName;
@property (nonatomic, copy) NSString * _Nullable identifier;
@property (nonatomic, copy) NSString * _Nullable alias;
@property (nonatomic, copy) NSString * _Nullable printerName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (MMUsingDevice * _Nonnull)createWithModel:(MMBluetoothDeviceModel * _Nonnull)model printerName:(NSString * _Nonnull)printerName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSnCode:(NSString * _Nonnull)snCode deviceType:(NSString * _Nonnull)deviceType deviceName:(NSString * _Nonnull)deviceName lasTime:(double)lasTime identifier:(NSString * _Nonnull)identifier alias:(NSString * _Nonnull)alias printerName:(NSString * _Nonnull)printerName OBJC_DESIGNATED_INITIALIZER;
/// 当前用户使用
///
/// returns:
/// description
+ (MMUsingDevice * _Nullable)current SWIFT_WARN_UNUSED_RESULT;
/// 清空缓存
///
/// returns:
/// description
+ (void)clear;
/// 保存或者更新
///
/// returns:
/// description
- (void)saveOrUpdate;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
